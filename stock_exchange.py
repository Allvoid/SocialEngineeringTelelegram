import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = 'YOUR_BOT_TOKEN'

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SELECT_ACTION, SELECT_CURRENCY, WAIT_CONTACT = range(3)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
action_keyboard = [['–ö—É–ø–∏—Ç—å', '–ü—Ä–æ–¥–∞—Ç—å']]
action_markup = ReplyKeyboardMarkup(action_keyboard, one_time_keyboard=True, resize_keyboard=True)

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
CRYPTO_LIST = [
    'Bitcoin (BTC)',
    'Ethereum (ETH)',
    'Ripple (XRP)',
    'Litecoin (LTC)',
    'Dogecoin (DOGE)',
    # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ—â—ë
]
crypto_keyboard = [CRYPTO_LIST[i:i+2] for i in range(0, len(CRYPTO_LIST), 2)]
crypto_markup = ReplyKeyboardMarkup(crypto_keyboard, one_time_keyboard=True, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è (–∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å)."""
    user_name = update.effective_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{user_name}</b>!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à CryptoBot.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:"
    )
    await update.message.reply_html(text, reply_markup=action_markup)
    return SELECT_ACTION

async def action_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å."""
    choice = update.message.text
    context.user_data['action'] = choice  # —Å–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä
    # –ü–∞—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏
    examples = (
        "üìä –ü—Ä–∏–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
        "- 0.005 BTC –∑–∞ 100 USD\n"
        "- 1 ETH –∑–∞ 2000 USD\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{choice}</b>.\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:"
    )
    await update.message.reply_html(examples, reply_markup=crypto_markup)
    return SELECT_CURRENCY

async def currency_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É."""
    crypto = update.message.text
    context.user_data['crypto'] = crypto
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å, –Ω–æ –ø–æ –¢–ó —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{crypto}</b>\n"
        "–î–∞–Ω–Ω—ã–π –∫—É—Ä—Å –∫ USD: <b>???</b>\n\n"
        "–ö—É—Ä—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
    )
    await update.message.reply_html(text)
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    contact_button = KeyboardButton(text='üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)
    contact_markup = ReplyKeyboardMarkup([[contact_button]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        reply_markup=contact_markup
    )
    return WAIT_CONTACT

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è."""
    contact = update.message.contact
    if contact and contact.phone_number:
        phone_number = contact.phone_number
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ –¢–ó)
        logging.info(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º: {phone_number}")
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä (–¥–∞–ª–µ–µ –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç)
    return ConversationHandler.END

async def fallback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ö–æ–¥–∏—Ç –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥."""
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.")
    return

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_ACTION: [
                MessageHandler(
                    filters.Regex('^(–ö—É–ø–∏—Ç—å|–ü—Ä–æ–¥–∞—Ç—å)$'),
                    action_choice
                )
            ],
            SELECT_CURRENCY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, currency_choice)
            ],
            WAIT_CONTACT: [
                MessageHandler(filters.CONTACT, contact_handler)
            ],
        },
        fallbacks=[MessageHandler(filters.ALL, fallback)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == '__main__':
    main()