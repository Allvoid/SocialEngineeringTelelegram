import os
import logging
import asyncio
from functools import wraps
from collections import defaultdict
from datetime import datetime, timedelta

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    Chat,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

import sys

# –ï—Å–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ–¥–∞–ª–∏ —Ç–æ–∫–µ–Ω, –∑–∞–±–∏—Ä–∞–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ ‚Äî None –∏–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
if len(sys.argv) > 1:
    TOKEN = sys.argv[1]
else:
    TOKEN = '<–í–ê–®_–¢–û–ö–ï–ù_–ü–û_–£–ú–û–õ–ß–ê–ù–ò–Æ>'  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å None, –µ—Å–ª–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# BOT_TOKEN –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –∫–æ–¥–µ
BOT_TOKEN = os.getenv('CRYPTOBOT_TOKEN')
if not BOT_TOKEN:
    raise RuntimeError("CRYPTOBOT_TOKEN environment variable is not set")

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SELECT_ACTION, SELECT_CURRENCY, WAIT_CONTACT = range(3)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
action_markup = ReplyKeyboardMarkup([['–ö—É–ø–∏—Ç—å', '–ü—Ä–æ–¥–∞—Ç—å']],
                                    one_time_keyboard=True, resize_keyboard=True)
CRYPTO_LIST = [
    'Bitcoin (BTC)',
    'Ethereum (ETH)',
    'Ripple (XRP)',
    'Litecoin (LTC)',
    'Dogecoin (DOGE)',
]
crypto_keyboard = [CRYPTO_LIST[i:i+2] for i in range(0, len(CRYPTO_LIST), 2)]
crypto_markup = ReplyKeyboardMarkup(crypto_keyboard,
                                    one_time_keyboard=True, resize_keyboard=True)

# --- Rate Limiter ---
# –ø—Ä–æ—Å—Ç–æ–π in-memory –ª–∏–º–∏—Ç–µ—Ä: –Ω–µ –±–æ–ª–µ–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_RATE = defaultdict(list)
RATE_LIMIT = 5  # —Å–æ–æ–±—â–µ–Ω–∏–π
RATE_PERIOD = timedelta(minutes=1)

def rate_limited(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        now = datetime.utcnow()
        # –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        USER_RATE[user_id] = [t for t in USER_RATE[user_id] if now - t < RATE_PERIOD]
        if len(USER_RATE[user_id]) >= RATE_LIMIT:
            # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ —à–ª—ë–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            return await update.message.reply_text(
                "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        USER_RATE[user_id].append(now)
        return await func(update, context, *args, **kwargs)
    return wrapper

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@rate_limited
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
    if update.effective_chat.type != Chat.PRIVATE:
        return await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
    user = update.effective_user
    await update.message.reply_html(
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à CryptoBot.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=action_markup
    )
    return SELECT_ACTION

@rate_limited
async def action_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    # –í–¥–æ–±–∞–≤–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    if choice not in ('–ö—É–ø–∏—Ç—å', '–ü—Ä–æ–¥–∞—Ç—å'):
        return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")
    context.user_data['action'] = choice
    await update.message.reply_html(
        f"üìä –ü—Ä–∏–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
        "- 0.005 BTC –∑–∞ 100 USD\n"
        "- 1 ETH –∑–∞ 2000 USD\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{choice}</b>.\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:",
        reply_markup=crypto_markup
    )
    return SELECT_CURRENCY

@rate_limited
async def currency_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    crypto = update.message.text
    if crypto not in CRYPTO_LIST:
        return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∫–Ω–æ–ø–∫–æ–π.")
    context.user_data['crypto'] = crypto
    # –ó–∞–≥–ª—É—à–∫–∞ –∫—É—Ä—Å–∞ ‚Üí –∑–¥–µ—Å—å –ø–æ–∑–∂–µ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
    await update.message.reply_html(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{crypto}</b>\n"
        "–î–∞–Ω–Ω—ã–π –∫—É—Ä—Å –∫ USD: <b>???</b>\n\n"
        "–ö—É—Ä—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
    )
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç, –∏ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –∏–º–µ–Ω–Ω–æ —Ç–æ–≥–æ, –∫—Ç–æ –ø–∏—à–µ—Ç
    contact_button = KeyboardButton(
        text='üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        request_contact=True
    )
    kb = ReplyKeyboardMarkup([[contact_button]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        reply_markup=kb
    )
    return WAIT_CONTACT

@rate_limited
async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    contact = update.message.contact
    user = update.effective_user
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–¥–º–µ–Ω—ã —á—É–∂–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞:
    if not contact or contact.user_id != user.id:
        return await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚òéÔ∏è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç."
        )
    phone_number = contact.phone_number
    # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —à–ª—ë–º –æ–±—Ä–∞—Ç–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –≤–∏–¥–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    logging.info(f"[AUTH] User {user.id} ({user.username}) authorized with phone {phone_number}")
    await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –°–ø–∞—Å–∏–±–æ.")
    return ConversationHandler.END

async def fallback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º."
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ‚Äî —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª."""
    logging.error("Exception while handling an update:", exc_info=context.error)
    # –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

def main() -> None:
    logging.basicConfig(
        format='%(asctime)s ‚Äî %(name)s ‚Äî %(levelname)s ‚Äî %(message)s',
        level=logging.INFO
    )
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, action_choice)],
            SELECT_CURRENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, currency_choice)],
            WAIT_CONTACT: [MessageHandler(filters.CONTACT, contact_handler)],
        },
        fallbacks=[MessageHandler(filters.ALL, fallback)],
        allow_reentry=True
    )
    app.add_handler(conv)

    # –ù–µ –¥–∞—ë–º –±–æ—Ç-–∞–ø–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å—ë –ø–æ–¥—Ä—è–¥
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ —É–∑–∫–æ—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∑–¥–µ—Å—å

    app.run_polling()

if __name__ == '__main__':
    main()
