import logging
from datetime import datetime

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# --------------------------- CONFIG ---------------------------
BOT_TOKEN = ""  # ‚Üê paste bot token here

BUTTON_TEXT = "üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä"
WELCOME_TEXT = (
    "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à!</b>\n\n"
    "–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî Telegram –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º."
)
THANKS_TEMPLATE = (
    "‚úÖ –°–ø–∞—Å–∏–±–æ, <b>{name}</b>!\n\n"
    "–í–∞—à –Ω–æ–º–µ—Ä <b>{phone}</b> –ø–æ–ª—É—á–µ–Ω. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ¬´{date}¬ª.\n"
    "–£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!"
)
ERROR_TEXT = (
    "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑ –ª–∏–±–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏."
)

# --------------------------- HANDLERS ---------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send greeting and show contact request button."""
    keyboard = [[KeyboardButton(text=BUTTON_TEXT, request_contact=True)]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_html(WELCOME_TEXT, reply_markup=markup)


async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle received phone number, print it to console, thank user."""
    contact = update.message.contact
    if contact and contact.phone_number:
        phone = contact.phone_number
        logging.info("New participant: %s (tg id %s)", phone, contact.user_id)

        confirm = THANKS_TEMPLATE.format(
            name=update.effective_user.first_name,
            phone=phone,
            date=datetime.now().strftime("%d.%m.%Y"),
        )
        await update.message.reply_html(confirm, reply_markup=ReplyKeyboardRemove())
    else:
        await update.message.reply_text(ERROR_TEXT)


# --------------------------- MAIN ---------------------------

def main() -> None:
    logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.CONTACT, contact_handler))

    application.run_polling()


if __name__ == "__main__":
    main()
