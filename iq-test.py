import logging
import time
from datetime import datetime
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
)

import sys

TOKEN = sys.argv[1]

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
DOB, CONTACT = range(2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ *IQ-—Ç–µ—Å—Ç*!",
            parse_mode=ParseMode.MARKDOWN
        )
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ—Å—Ç –¥–ª—è –≤–∞—Å, —É–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.\n"
            "–§–æ—Ä–º–∞—Ç: –î–î.MM.–ì–ì–ì–ì"
        )
        return DOB
    except Exception as e:
        logger.exception("Error in start handler")
        # –Ω–∏—á–µ–≥–æ –Ω–µ –ª–æ–º–∞–µ–º ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
        return ConversationHandler.END

async def dob_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        text = update.message.text.strip()
        dob = datetime.strptime(text, "%d.%m.%Y")
        context.user_data['dob'] = text

        button = KeyboardButton("‚òéÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
        markup = ReplyKeyboardMarkup(
            [[button]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëá, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=markup
        )
        return CONTACT
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì"
        )
        return DOB
    except Exception as e:
        logger.exception("Error in dob_handler")
        return ConversationHandler.END

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        contact = update.message.contact
        if not contact or not contact.phone_number:
            # –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return CONTACT

        phone = contact.phone_number
        dob = context.user_data.get('dob', '–Ω–µ —É–∫–∞–∑–∞–Ω')

        # –õ–æ–≥–∏—Ä—É–µ–º (–∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º) –¥–∞–Ω–Ω—ã–µ
        logger.info(f"User ID: {update.effective_user.id}, DOB: {dob}, Phone: {phone}")

        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.exception("Error in contact_handler")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞.")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        await update.message.reply_text(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception:
        pass
    return ConversationHandler.END

# –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)
    # –µ—Å–ª–∏ –º–æ–∂–µ–º ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if hasattr(update, "message") and update.message:
        try:
            await update.message.reply_text(
                "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
            )
        except Exception:
            pass

def main() -> None:
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            DOB: [MessageHandler(filters.TEXT & ~filters.COMMAND, dob_handler)],
            CONTACT: [MessageHandler(filters.CONTACT, contact_handler)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    app.add_handler(conv_handler)
    app.add_error_handler(error_handler)

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–∞–¥–µ–Ω–∏–π: –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –≤ run_polling –∞–≤—Ç–æ–º–∞—Ç–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫
    while True:
        try:
            app.run_polling()
        except Exception:
            logger.exception("Polling crashed ‚Äî restarting in 5 seconds")
            time.sleep(5)

if __name__ == '__main__':
    main()
